<?php

class SchemaShell extends Shell {

    public $options = array(
        'create' => array(
            'description' => 'create database in destination server based on schema file.',
            '-f' => array(1, 'specify the schema file to create the database at remote server'),
            '-db' => array(1, 'specify the database connection name'),
        ),
        'update' => array(
            'description' => 'update database in destination server based on schema file.',
            '-f' => array(1, 'specify the schema file to update the database at remote server'),
            '-db' => array(1, 'specify the database connection name'),
        ),
        'dump' => array(
            'description' => 'dump tables from remote database as php schema config or sql.',
            '-schema' => array(1, 'dump tables from remote database as php schema config'),
            '-sql' => array(1, 'dump tables from remote database as sql'),
        ),
        'generate' => array(
            'description' => 'generate sql script from schema config',
            '-db' => array(1, 'specify the db to generate, if not spefified, all tables from all db will be generated'),
            '-path' => array(1, 'specify the path for generate sql file, default: console/schema'),
        ),

    );


/**
 * Read database and Write schema object
 * accepts a connection as first arg or path to save as second arg
 *
 * @return void
 */
    public function cmd_generate1() {
        $schema = DBManager::instance()->getDBSchema();
        //$dbNames = array_keys(get_class_vars(get_class($schema)));
        $dbConfig = DBManager::instance()->getDBConfig();
        $dbConfigNames = array_keys(get_class_vars(get_class($dbConfig)));
              
        foreach($dbConfigNames as $configName) {
            if (!isset($dbConfig->{$configName}['database']))
                continue;
            $dbName = $dbConfig->{$configName}['database'];
            if (isset($schema->{$dbName})) {
                $sql = $this->_generate($configName, $schema->{$dbName});
                debug($sql);
            }
        }
 
    }

    public function cmd_generate() {
        $schema = DBManager::instance()->getDBSchema();
        $schema->fillUserType();
        $dbName = isset($this->params['db']) ? $this->params['db'] : null;
        
        //获取需要生成的表的集合
        if (!isset($dbName)) {
            $fileName = 'all';
            $tables = array_keys($schema->models);
        } else {
            if (empty($schema->dbs[$dbName])) {
                throw new HException('no specified config for '.$dbName);
            }
            $fileName = $dbName;
            $tables = $schema->dbs[$this->params['db']];
        }
        
        $out = "-- This file is generated by db schema definition. DO NOT change it.\n\n\n";
        $db = DBManager::instance()->getDataSource('default');
        foreach($tables as $table) {
            if (!isset($schema->models[$table])) {
                $this->out("*** $table schema missing ***\n");
                $out .= "-- *** $table schema missing *** \n\n";
                continue;
            }
            $out .= $db->dropSchema($table) . "\n";
            $out .= $db->createSchema($table, $schema->models[$table]) . "\n\n\n";
        }
        if (isset($this->params['path'])) {
            $path = $this->params['path'];
            File::ensureTrailingSlash($path);
        } else {
            $path = ROOT_.'config/schema/';
            File::ensureDir($path);
        }
        $fileName = $path.'db_'.$fileName.'.sql';
        file_put_contents($fileName, $out);
    }

    public function cmd_dump() {

    }


    public function cmd_create() {
        $this->out('to be implemented');
    }


    public function update() {
        list($Schema, $table) = $this->_loadSchema();
        $this->_update($Schema, $table);
    }



    protected function _generate($config, $tables) {
        $db = DBManager::instance()->getDataSource($config);

        $out = '';
        
        foreach($tables as $table => $fields) {
            $out .= $db->dropSchema($table) . "\n";
            $out .= $db->createSchema($table, $fields) . "\n\n\n";
        }
        return $out;
    }



}
